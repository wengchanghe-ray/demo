name: PostgreSQL Migration Pipeline

on:
  push:
    branches:
      - master  # Adjust the branch name as needed

jobs:
  setup_databases:
    runs-on: ubuntu-latest

    services:
      postgres1:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: your_password
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      postgres2:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: your_password
        ports:
          - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Wait for PostgreSQL to be ready
        run: sleep 10  # Adjust as necessary for PostgreSQL startup time

      - name: Install psql client
        run: sudo apt-get install -y postgresql-client

      - name: Execute script1.ddl on PostgreSQL1
        run: |
          PGPASSWORD=your_password psql -h localhost -U postgres -d postgres -p 5432 -c "create table A (id integer);"

      - name: Execute script2.ddl on PostgreSQL2
        run: |
          PGPASSWORD=your_password psql -h localhost -U postgres -d postgres -p 5433 -c "create table A (id integer, name varchar(20));"

      - name: Install Migra
        run: pip install migra[pg]

      - name: Generate Migra migration script
        run: migra --unsafe postgresql://postgres:your_password@localhost:5432/postgres postgresql://postgres:your_password@localhost:5433/postgres -v  > migration_script.sql

      - name: View migration output
        run: cat migration_script.sql

#      - name: Run Migra migration script
#        run: psql postgresql://postgres:your_password@localhost:5433/postgres -1 -f migration_script.sql
#
#      - name: Verify Migration Result
#        run: |
#          echo "Checking row count in Database 1"
#          ROW_COUNT_DB1=$(docker exec ${{ job.services.postgres1.id }} psql -U postgres -t -c "SELECT COUNT(*) FROM A;")
#          echo "Row count in Database 1: $ROW_COUNT_DB1"
#
#          echo "Checking row count in Database 2"
#          ROW_COUNT_DB2=$(docker exec ${{ job.services.postgres2.id }} psql -U postgres -t -c "SELECT COUNT(*) FROM A;")
#          echo "Row count in Database 2: $ROW_COUNT_DB2"
#
#          if [ "$ROW_COUNT_DB1" -eq "$ROW_COUNT_DB2" ]; then
#            echo "Row counts are equal. Migration successful."
#          else
#            echo "Row counts are not equal. Migration failed."
#            exit 1
#          fi